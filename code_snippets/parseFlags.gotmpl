{{/*
  Trigger Type: Command
  Trigger: Any

  Copyright: Galen CC, 2021-Present
  Source: https://github.com/galen8183/yagpdb-cc
  Released under license GPL version 3 (https://www.gnu.org/licenses/gpl-3.0.txt)
*/}}

{{/* Variable declaration begins: */}}
{{/* Add flags as desired - follow the format ["FlagName" ""] (flag name must be title case) */}}
  {{$availableFlags := sdict
    "Flag" ""
    "Test" ""
  }}
  {{$concat := false}} {{/* When set to true, repeated flags will be concatenated */}}
  {{$robust := false}} {{/* Continue parsing if an invalid flag is encountered (and add to $d.ErrorFlags) */}}
  {{$d := sdict "Message" "" "Flags" sdict "ErrorFlags" cslice}} {{/* Parsed data will be stored here */}}
{{/* Variable declaration ends */}}


{{/* Don't edit below (unless you want to learn/know what you're doing) */}}
{{/* Parses flags and forces unflagged text into a flag ("Message") */}}
{{$parsedData := reFindAllSubmatches `-(\S+)\s*((?:[^-]|\S-)*)(?:\s|$)` (print "-Message " .StrippedMsg)}}
{{$d.Set "Message" (reReplace `\s*\z` (index $parsedData 0 2) "")}} {{/* Adds first flag (unflagged text) to $d.Message */}}

{{/* Removes first 'flag' (unflagged text) and iterates through parsed flags */}}
{{if gt (len $parsedData) 1}}{{range (slice $parsedData 1)}}{{if or $robust (not $d.ErrorFlags)}} {{/* If $robust == true, keep parsing even if invalid flags are detected */}}
  {{- $currentFlag := index . 1 |lower|title}} {{$currentVal := reReplace `\s*\z` (index . 2) ""}} {{/* Formats flag name and value */}}
  {{- /* Following conditionals deal with setting flags, concatenation, boolean flags (no value set), and invalid flags */}}
  {{- if eq (kindOf ($availableFlags.Get $currentFlag)) "string"}}
    {{- if and $concat $currentVal ($d.Flags.Get $currentFlag)}}
      {{- $d.Flags.Set $currentFlag (print ($d.Flags.Get $currentFlag) " " $currentVal)}}
    {{- else if $currentVal}} {{$d.Flags.Set $currentFlag $currentVal}} {{/* Set flag value */}}
    {{- else}} {{$d.Flags.Set $currentFlag true}} {{end}} {{/* Set flag to boolean 'true' if no value is given */}}
  {{- else if $robust}} {{$d.Set "ErrorFlags" ($d.ErrorFlags.Append $currentFlag)}}
  {{- else}} {{$d.Set "ErrorFlags" (cslice $currentFlag)}} {{end}}
{{- end}}{{end}}{{end}}

{{/*
  Your CC script goes after this comment
  Parsed flags are in $d.Flags as type templates.Sdict
  Text entered before flags is in $d.Message as type string
  Error flag(s) are in $d.ErrorFlags as type templates.Slice
*/}}

{{/* Example output - Sends config values and parsed data for testing flag behaviour */}}
{{$flags := ""}} {{$errors := ""}}
{{range $k,$v := $d.Flags}} {{$flags = print $flags "\n  " $k ": " (json $v)}} {{end}}
{{range $d.ErrorFlags}} {{$errors = print $errors "\n  " .}} {{end}}
{{$data := printf "ErrorFlags:%s\nFlags:%s\nMessage:\n%s" (or $errors "None") (or $flags "None") (or $d.Message "None")}}
{{$description := printf "Settings:\n> Available Flags: `%s`\n> Concat? `%t`\n> Robust? `%t`\n```json\n%s\n```"
  (json $availableFlags) $concat $robust $data
}}
{{sendMessage nil (complexMessage "embed" (cembed "title" "Flag Parser" "description" $description))}}
