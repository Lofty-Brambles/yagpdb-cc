{{/*
  Trigger Type: Regex
  Trigger: \A(?i)(?:-|<@!?204255221017214977>)\s*(?:view-?)?(?:data|struct)(?:\s+|\z)

  Copyright: Galen CC, 2021-Present
  Source: https://github.com/galen8183/yagpdb-cc
  Released under license GPL version 3 (https://www.gnu.org/licenses/gpl-3.0.txt)
*/}}

{{$syntax := joinStr "\n" "```" "Data help" "Data <Field Name:Text>" "Data <Flags...>" "``````" "[-msg msg:ID - Message]" "[-chan chan:ID/Mention - Channel]" "[-user user:ID/Mention - Member]" "[-role role:ID/Mention - Role]" "[-emoji emoji:ID/Emoji - Guild emoji]" "[-voice voice:User ID/Mention - Target user's voice state]" "[-link link:Text - Link to channel or message]" "[-reply reply:Switch - Target referenced/reply message" "[-dbkey dbkey:Text - Database entry key (pattern)]" "[-dbuser dbuser:ID/Mention - Database entry UserID]" "[-dbskip dbskip:Int - Database query nSkip]" "[-file file:Switch - Force file output]" "```"}}
{{$query := sdict "Init" true}}{{- $err := ""}}

{{/* Parse flags, field name */}}
{{range $v := reFindAllSubmatches `(?i)(?:\B-)?(\S+)(?:\s+(?:(\d{17,19})|<(?:\#|@[!&]?|a?:[\w~]+:)(\d{17,19})>|https://(?:\w+\.)?discord(?:app)?\.com/channels/(\d+)/(\d+)(?:/(\d+))?|([^-\s]\S*)))?` (str .StrippedMsg)}}{{if not $err}}
  {{- $n := index $v 1|lower}}{{$id := or (index $v 2) (index $v 3)|toInt}}

  {{- with $query}}
    {{- if eq $n "f" "file"}}{{.Set "File" true}}
    {{- else if eq $n "c" "chan"}}{{.Set "ChannelID" $id}}
    {{- else if eq $n "m" "msg"}}{{.Set "MessageID" $id}}
    {{- else if eq $n "v" "voice"}}{{$query = sdict "Name" "Voice State" "Target" ($.Guild.GetVoiceState $id)}}
    {{- else if eq $n "u" "user"}}{{$query = sdict "Name" "Member" "Target" (getMember $id)}}
    {{- else if eq $n "r" "role"}}{{$query = sdict "Name" "Role" "Target" (getRole $id)}}
    {{- else if eq $n "e" "emoji"}}{{$query = sdict "Name" "Emoji" "Target" ($.Guild.GetEmoji $id)}}
    {{- else if eq $n "dbk" "dbkey"}}{{.Set "DBKey" (index $v 7)}}
    {{- else if eq $n "dbu" "dbuser"}}{{.Set "DBUser" (index $v 7|toInt|or $id)}}
    {{- else if eq $n "skip" "dbskip"}}{{.Set "DBSkip" (index $v 7|toInt|or $id)}}
    {{- else if and (eq $n "reply") $.Message.ReferencedMessage}}{{.Set "MessageID" $.Message.ReferencedMessage.ID}}
    {{- else if and (eq $n "l" "link") (eq (index $v 4|toInt) $.Guild.ID)}}{{$query = sdict "Name" "Message" "ChannelID" (index $v 5|toInt) "MessageID" (index $v 6|toInt)}}
    {{- else if not (or .Name .MessageID .ChannelID .DBKey .DBUsr)}}{{.Set "Name" (title $n)}}{{.Set "Target" (or (($ctx := sdict $).Get (index $v 1)) (lower $n|title|$ctx.Get))}}{{end}}
  {{- end}}
{{- end}}{{else}}
  {{with .ExecData}}
    {{if in (printf "%T" .) "SDict"}}{{if .Target}}{{$query = .}}{{else}}{{$query.Set "Target" .}}{{end}}
    {{else}}{{$query.Set "Target" .}}{{$query.Set "Name" "ExecData"}}{{end}}
  {{else}}{{$err = "Not enough arguments provided"}}{{end}}
{{end}}

{{/* If message, channel, or link flags provided, get data */}}
{{with $query}}
  {{if .MessageID}}{{getMessage (or .ChannelID $.Channel.ID) .MessageID|.Set "Target"}}{{.Set "Name" "Message"}}
  {{else if .ChannelID}}{{getChannelOrThread .ChannelID|.Set "Target"}}{{.Set "Name" "Channel"}}
  {{else if .HasKey "DBUser"}}{{dbGetPattern .DBUser (or .DBKey "%") 10 (or .DBSkip 0)|.Set "Target"}}{{.Set "Name" "DB Entries"}}
  {{else if .DBKey}}{{dbTopEntries .DBKey 10 (or .DBSkip 0)|.Set "Target"}}{{.Set "Name" "DB Entries"}}{{end}}
{{end}}

{{/* Check if null target (and no parsing error) */}}
{{if not (or $err $query.Target)}}{{$err = print "Invalid target `" $query.Name "`"}}{{end}}
{{$query.Set "Name" (str $query.Name)}}

{{/* Ignore errors for help */}}
{{if eq $query.Name "Help" "H"}}{{sendMessage nil (cembed
  "title" "Data/Struct/Viewdata/Viewstruct"
  "description" (print $syntax "\nDisplays a various data in a human-readable format\nRecursively deconstructs composite datatypes, essentially recreating and improving the `json` function")
)}}
{{else if $err}}
  {{if not $query.NoErr}}{{print $syntax "\nInvalid arguments passed: " $err}}{{end}}
{{else}}{{/* Valid query, begin parsing data */}}
  {{$data := sdict
    "Name"   $query.Name
    "Target" $query.Target
    "Text"   ""
    "Indent" ""
    "Width"  $query.Width
  }}

  {{- block "parse" $data}}
    {{- $d := sdict (str .Name) .Target}}{{$t := kindOf .Target true}}{{$w := or .Width 10}}{{/* data, type, width */}}

    {{- /* Make iterable */}}
    {{- if eq $t "struct"}}{{$d = structToSdict .Target}}
    {{- else if eq $t "slice"}}{{$d = .Target}}{{$w = 3}}
    {{- else if eq $t "map"}}{{$d = .Target}}{{end}}

    {{- /* Format data, recurse if possible */}}
    {{- range $n, $val := $d}}{{$new := false}}
      {{- if eq ($t:=kindOf $val true) "map" "slice"}}{{if len $val}}{{$new = $val}}{{end}}{{else if eq $t "struct"}}{{$new = and (printf "%T" $val|in "*time.Time"|not) $valStr}}{{end}}

      {{- if $new}}
        {{- template "parse" $data := sdict "Target" $val "Text" "" "Indent" (print $.Indent "  ") "Width" $.Width}}
        {{- printf "%s%s%-*v:\n%s" $.Text $.Indent $w $n $data.Text|$.Set "Text"}}
      {{- else}}{{$valStr := ""}}
        {{- if in (printf "%T" $val) "templates.Dict"}}{{$valStr = "{}"}}{{else}}{{$valStr = json $val}}{{end}}
        {{- printf "%s%s%-*v: %s\n" $.Text $.Indent $w $n $valStr|$.Set "Text"}}
      {{- end}}
    {{- else}}{{printf "%s%sUnsupported type: %s\n" $.Text $.Indent (json $.Target)|$.Set "Text"}}{{end}}
  {{- end}}

  {{$desc := ""}}{{$msg := sdict "embed" (or $query.Embed (sdict "title" $query.Name))}}
  {{$query.Set "Name" (or (and (eq $query.Name "Guild" "Server") "Guild-Server") $query.Name)}}

  {{/* Partial paths to discord documentation */}}{{$docs := sdict "Channel" "channel#channel" "Member" "guild#guild-member" "Message" "channel#message" "Guild-Server" "guild#guild" "User" "user#user"}}
  {{with $docs.Get $query.Name}}{{$desc = printf "[Discord Developer Docs](https://discord.com/developers/docs/resources/%s-object) | [YAGPDB Template Docs](https://docs.yagpdb.xyz/reference/templates#%s)" . (lower $query.Name)}}{{end}}

  {{$chars := len $data.Text}}{{/* Send file(s) if length >= 100k/4k */}}
  {{if $count := div $chars 100000}}
    {{- range seq 0 $count}}{{/* Send section, add file URL to embed */}}
      {{- $f := slice $data.Text (mult . 100000) (add . 1|mult 100000)}}
      {{- $mID := sendMessageRetID nil (complexMessage "file" $f)}}
      {{- $desc = printf "%s\nFile %d - [Download](%s)" $desc (add . 1) (index (getMessage nil $mID).Attachments 0).URL}}
    {{- end}}

    {{$desc = print $desc "\n\n⚠️ **Warning** - Formatted data is over 100k characters long, see linked file(s) for full data."}}
    {{slice $data.Text (mult $count 100000)|$msg.Set "file"}}
  {{else if $query.File}}{{$msg.Set "file" $data.Text}}{{$desc = print $desc "\nForced file output, refer to the attached file."}}
  {{else if ge $chars 4000}}{{$msg.Set "file" $data.Text}}{{$desc = print $desc "\nRequested data is too large to display in an embed, please refer to the attached file."}}
  {{else}}{{$desc = print $desc "\n```yaml\n" $data.Text "```"}}{{end}}

  {{$msg.embed.Set "description" $desc}}
  {{if $query.NoEmbed}}{{$msg.Del "embed"}}{{end}}
  {{sendMessage nil (complexMessage $msg)}}
{{end}}
