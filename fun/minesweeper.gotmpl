{{/*
  Trigger Type: Regex
  Trigger: \A(?i)(?:(f(?:lag)?\s+)?([0-9]+)[,\s]\s*([0-9]+)\z|(?-i:-|<@!?204255221017214977>)\s*mines(?:weeper)?(?:\s+|\z))

  Copyright: Galen CC, 2022-Present
  Source: https://github.com/galen8183/yagpdb-cc
  Released under license GPL version 3 (https://www.gnu.org/licenses/gpl-3.0.txt)
*/}}

{{/* "Cmd" is regex for command group, "Dims" is board dimensions (square), "Mines" is number of mines to place */}}
{{$cfg := sdict
  "Cmd" `\A(?i)(?-i:-|<@!?204255221017214977>)\s*mines(?:weeper)?(?:\s+|\z)`
  "Dims" 16
  "Mines" 40
  "Flag" '>'
}}

{{$d := (dbGet .User.ID "minesweeper").Value}}

{{if reFind $cfg.Cmd .Message.Content}}{{/* Check if command was ran first */}}
  {{$err := ""}}{{$syntax := joinStr "\n" "```" "Minesweeper play" "Minesweeper end" "Minesweeper fetch" "```"}}
  {{$cmd := reReplace (print $cfg.Cmd `|\s+\z`) (lower .Message.Content) ""}}

  {{if eq $cmd "start" "play"}}{{if not $d}}
    {{/* Start new game */}}
    {{$d = sdict
      "ChannelID" $.Channel.ID
      "Cfg" $cfg
      "Board" cslice
      "Dug" 0
      "Seq" (seq 0 $cfg.Dims)
      "Width" (sub $cfg.Dims 1 | str | len | add 2)
    }}

    {{/* Initialise the minefield (2d slice, rows of tiles) */}}
    {{range $y := $d.Seq}}
      {{- $d.Set "Board" ($d.Board.Append cslice)}}
      {{- range $d.Seq}}{{$d.Board.Set $y ( (index $d.Board $y).Append (sdict "Val" 0 "Dug" false "Flag" false) )}}{{end}}
    {{- end}}

    {{- $numMines := 0}}{{/* Place mines randomly until all are placed */}}
    {{- while lt $numMines $d.Cfg.Mines}}
      {{- $n := pow $d.Cfg.Dims 2|add -1|randInt}}
      {{- $y := div $n $d.Cfg.Dims}}{{$x := mod $n $d.Cfg.Dims|toInt}}{{/* x is row, y is column */}}

      {{- if eq (index $d.Board $y $x).Val -1}}{{continue}}{{end}}{{/* If mine is already placed, continue */}}

      {{- (index $d.Board $y $x).Set "Val" -1}}
      {{- $numMines = add $numMines 1}}{{/* Placed a bomb, increment counter */}}
    {{- end}}

    {{- /* Calculate numbered tiles */}}
    {{- range $y := $d.Seq}}
      {{- range $x := $d.Seq}}
        {{- if eq (index $d.Board $y $x).Val -1}}{{continue}}{{end}}{{/* Ignore bomb tiles */}}

        {{- $neighbours := 0}}
        {{- $a := seq (sub $y 1 | max 0 | toInt) (min (sub $d.Cfg.Dims 1) (add $y 1) | add 1)}}
        {{- $b := seq (sub $x 1 | max 0 | toInt) (min (sub $d.Cfg.Dims 1) (add $x 1) | add 1)}}

        {{- range $r := $a}}
          {{- range $c := $b}}
            {{- if eq (index $d.Board $r $c).Val -1}}{{$neighbours = add $neighbours 1}}{{end}}
          {{- end}}
        {{- end}}

        {{- (index $d.Board $y $x).Set "Val" $neighbours}}{{/* Set tile to number of neighbouring bombs */}}
      {{- end}}
    {{- end}}

    {{$d.Set "MessageID" (sendMessageRetID nil (printf "Your game has begun! Enter `x, y` to dig, `flag x, y` to flag\n```\n%s```" (execTemplate "display" $d) ) )}}
  {{else}}{{$err = "You're already in a game (tip: use `-minesweeper end`)"}}{{end}}{{else if eq $cmd "end"}}{{if $d}}
    {{/* End existing game, show full unfinished board in new message */}}
    {{range $y := $d.Seq}}{{range $x := $d.Seq}}{{(index $d.Board $y $x).Set "Dug" true}}{{end}}{{end}}
    {{printf "Ended your game!\n```\n%s```" (execTemplate "display" $d)}}
    {{$d = sdict}}
  {{else}}{{$err = "No ongoing game found"}}{{end}}{{else if eq $cmd "fetch"}}{{if $d}}
    {{deleteMessage $d.ChannelID $d.MessageID 0}}
    {{$d.Set "ChannelID" $.Channel.ID}}
    {{$d.Set "MessageID" (sendMessageRetID nil (printf "Here is your ongoing game! Enter `x, y` to dig, `flag x, y` to flag\n```\n%s```" (execTemplate "display" $d) ) )}}
  {{else}}{{$err = "No ongoing game found"}}{{end}}{{else}}{{$err = "No enough arguments passed"}}{{end}}

  {{if $err}}{{print $syntax "\nInvalid arguments provided: " $err}}{{end}}
{{else if and $d (eq (toInt $d.ChannelID) .Channel.ID) ($play := reFindAllSubmatches `\A(?i)(f(?:lag)?\s+)?([0-9]+)[,\s]\s*([0-9]+)\z` .Message.Content)}}{{/* If user is playing a game, check for valid input (x,y / x,  y / x y / etc.) */}}
  {{if and (lt ($x := index $play 0 2|toInt) $d.Cfg.Dims) (lt ($y := index $play 0 3|toInt) $d.Cfg.Dims)}}{{/* Check that play is within bounds (no need for negative check as regex only matches positive ints) */}}
    {{$good := true}}{{$m := ""}}

    {{if index $play 0 1}}{{(index $d.Board $y $x).Set "Flag" (not (index $d.Board $y $x).Flag)}}
    {{else}}
      {{/* Set X and Y, dig tile */}}
      {{$d.Set "Y" $y}}{{$d.Set "X" $x}}
      {{$good = execTemplate "dig" $d}}
      {{$d.Del "Recursed"}}
    {{end}}

    {{if $good}}{{/* If mine wasn't hit, update board */}}
      {{editMessage nil $d.MessageID (printf "Enter `x, y` to dig, `flag x, y` to flag\n```\n%s```" (execTemplate "display" $d) )}}
      {{deleteTrigger 5}}

      {{if $d.Err}}{{$d.Err}}! {{deleteResponse 10}}{{$d.Del "Err"}}{{end}}

      {{if ge $d.Dug (sub (pow $d.Cfg.Dims 2) $d.Cfg.Mines | toInt)}}{{$m = "Game over, you won!!!!"}}{{end}}
    {{else}}{{$m = "Game over! You lost :("}}{{end}}

    {{if $m}}
      {{range $y := $d.Seq}}{{range $x := $d.Seq}}{{(index $d.Board $y $x).Set "Dug" true}}{{(index $d.Board $y $x).Set "Flag" false}}{{end}}{{end}}
      {{printf "%s\n```\n%s```" $m (execTemplate "display" $d)}}
      {{$d = sdict}}
    {{end}}
  {{else}}Invalid play, try again :({{end}}
{{end}}

{{/* Update database with newest game data or delete entry */}}
{{if $d}}{{dbSet .User.ID "minesweeper" $d}}{{else}}{{dbDel .User.ID "minesweeper"}}{{end}}

{{define "display"}}{{/* "display" returns the board in a human readable format */}}
  {{- $m := printf "%*s" .Width " -"}}{{$y := printf "%*s" .Width ""}}

  {{- /* Make it look nice -- add line of '-' between top and minefield, space x axis indices */}}
  {{- range .Seq}}
    {{- $m = print $m "---"}}
    {{- $y = printf "%s%-3d" $y .}}
  {{- end}}

  {{- $m = print $m "\n"}}

  {{- range $i, $l := .Board}}{{/* Print board after proper data has been inserted */}}
    {{- $line := ""}}
    {{- range $l}}{{$chr := ' '}}
      {{- if .Flag}}{{$chr = $.Cfg.Flag}}
      {{- else if .Dug}}{{$chr = or (and (eq .Val -1) '*') (and (not .Val) 46) (add .Val 48)}}{{end}}
      {{- $line = printf "%s|%-2c" $line $chr}}
    {{- end}}

    {{- $m = printf "%-*d%s|\n%s" (sub $.Width 1) $i $line $m}}
  {{- end}}

  {{- $m = print "\n" $m}}{{range .Seq}}{{$m = print "---" $m}}{{end}}{{$m = printf "%*s%s%s" $.Width " -" $m $y}}
  {{- return $m -}}
{{end}}

{{define "dig"}}{{/* "dig" digs a given tile, and returns a boolean if it was a safe move; "dig" recurses if an empty tile was dug to dig all 0 valued and neighbouring tiles */}}
  {{- $curr := index .Board .Y .X}}

  {{- if $curr.Flag}}{{/* If tile is flagged, don't dig, return safe move status, error */}}
    {{- .Set "Err" (and (not .Recursed) "Tile is flagged")}}
    {{- return true}}
  {{- end}}

  {{- if and $curr.Dug (not .Recursed)}}{{/* If tile is dug, check surrounding flags, if satisfied dig unflagged neighbours */}}
    {{- $a := seq (sub .Y 1 | max 0 | toInt) (min (add .Y 1) (sub .Cfg.Dims 1) | add 1)}}
    {{- $b := seq (sub .X 1 | max 0 | toInt) (min (add .X 1) (sub .Cfg.Dims 1) | add 1)}}

    {{- $flags := 0}}{{/* Count of the flags we've seen */}}

    {{- range $r := $a}}
      {{- range $c := $b}}
        {{- if (index $.Board $r $c).Flag}}{{$flags = add $flags 1}}{{end}}
      {{- end}}
    {{- end}}

    {{- if eq $flags $curr.Val}}{{/* If the tile is satisfied by surrounding flags, dig unflagged neighbours */}}
      {{- range $r := $a}}
        {{- range $c := $b}}
          {{- if not (index $.Board $r $c).Flag}}
            {{- $.Set "Y" $r}}{{$.Set "X" $c}}{{$.Set "Recursed" true}}
            {{- $safe := execTemplate "dig" $}}

            {{- if not $safe}}{{return false}}{{end}}{{/* If a mine wasn't flagged, return unsafe status */}}
          {{- end}}
        {{- end}}
      {{- end}}
    {{- end}}

    {{- return true}}{{/* All flagged tiles were correct, a valid move */}}
  {{- else}}
    {{- .Set "Dug" (add .Dug 1)}}{{$curr.Set "Dug" true}}

    {{- if eq $curr.Val -1}}{{return false}}
    {{- else if gt $curr.Val 0}}{{return true}}{{end}}

    {{- /* (index .Board .Y .X).Val == 0, recursively dig neighbouring tiles */}}

    {{- /* Stay within bounds of neighbouring tiles for this recursion */}}
    {{- $a := seq (sub .Y 1 | max 0 | toInt) (min (add .Y 1) (sub .Cfg.Dims 1) | add 1)}}
    {{- $b := seq (sub .X 1 | max 0 | toInt) (min (add .X 1) (sub .Cfg.Dims 1) | add 1)}}

    {{- range $r := $a}}
      {{- range $c := $b}}
        {{- /* If tile was already dug, don't dig again */}}
        {{- if (index $.Board $r $c).Dug}}{{continue}}{{end}}

        {{- /* Continue recursing until a non-zero value or bomb is reached, ignore bombs being dug */}}
        {{- $.Set "Y" $r}}{{$.Set "X" $c}}{{$.Set "Recursed" true}}
        {{- $_ := execTemplate "dig" $}}
      {{- end}}
    {{- end}}

    {{- return true}}{{/* User dug 0, this is a valid move */}}
  {{- end -}}
{{end}}
